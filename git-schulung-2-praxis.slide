Git Schulung: Praxis
2015-10-19
Tags: git

Andreas Fett & Till Salzer
iSAX
andreas.fett@isax.com, till.salzer@isax.com
http://isax.com


* Praxisteil
Ihr probiert selbst einmal aus, wie sich Git auf der Kommandozeile anfühlt.


* Git configurieren (10m)
  git config --global Author
  git config --global uicolor

* Clonen eines bestehenden Repos (5min)
(Überleitung)

  git clone  # (remote git nativ)
  git log
  git log  # (fancy)
  git status (on branch master)


* Einchecken einer Datei (Unterschied Index Commit) (5min + 5 Reibungsverluste)
(neue Datei)
- eine neue Datei anlegen (vim foo.txt)
  git status
- git hat eine "Staging Area" (Index) um den Commit "vorzubereiten"

  git add foo.txt
  git status

  git commit (-v)

*Beachten:*
Commit Message: Format und Inhalt
- muss gesetzt sein (Denkt dran, das ist Doku, Nachvollziebarkeit!)
- Format Subject, Leerzeile, Body

  git status
  git log

* Änderung (5min)
(Konflikt vorprogrammieren (paarweise))

  git diff
  git status
  git add
  git status
  git diff
  git diff --cached
  git commit -v


* Push (5min)
  git push (rejected, erklären)
  git fetch (sync des upstream zu Euch)
  git status (keine Änderung)
  git log --all

* Konflikt Lösung (5min)

  git rebase # (was passiert hier)
  git status # (Konflikt angezeigt)

Konflikt lösen: Editieren mit *vim*

  git add
  git commit


* Fetch und rebase bis commit durch geht (5min)
Erklärung: Lokales Repo muss in sync mit Remote sein

  git push
  git rebase

ohne Konflikt!

* Branch anlegen (5min)
  git checkout -b foobar
  git status  # (on branch foobar)
  git checkout master
  git status  # (on branch master)
  git checkout foobar
  git status  # (on branch foobar)
commit auf Branch:
  git commit -v
  push auf branch

* Integration (nur Vortänzer) 5min
  git branch -r
  git merge alle branch namen
  git log

* The End.
60min
